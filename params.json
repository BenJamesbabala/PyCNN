{"name":"PyCNN","tagline":"Image Processing in Cellular Neural Networks with Python","body":"# PyCNN: Cellular Neural Networks Image Processing Python Library\r\n\r\n**Cellular Neural Networks (CNN)** are a parallel computing paradigm similar to neural networks, with the difference that communication is allowed between neighboring units only. Image Processing is one of its application. CNN processors were designed to perform image processing; specifically, the original application of CNN processors was to perform real-time ultra-high frame-rate (>10,000 frame/s) processing unachievable by digital processors.\r\n\r\nThis python library is the implementation of CNN for the application of **Image Processing**.\r\n\r\n![alt text](http://www.isiweb.ee.ethz.ch/haenggi/CNN_web/CNN_figures/blockdiagram.gif \"CNN Architecture\")\r\n\r\n## Motivation\r\n\r\nThis is an extension of a demo at 14th Cellular Nanoscale Networks and Applications (CNNA) Conference 2014. I have written a blog post, available at [Image Processing in CNN with Python on Raspberry Pi](http://blog.ankitaggarwal.me/technology/image-processing-with-cellular-neural-networks-using-python-on-raspberry-pi/).\r\n\r\n## Dependencies\r\nThe python modules are needed in order to use this library.\r\n```\r\nImage\r\nScipy\r\nNumpy\r\n```\r\n\r\n## Usage\r\n*Image Processing* using CNN is simple using this library, just clone the repository and use the following code.\r\n```python\r\nfrom cnnimg import cnn\r\ncnn.edgedetection('input.bmp', 'output1.png')\r\ncnn.grayscaleedgedetection('input.bmp', 'output2.png')\r\ncnn.cornerdetection('input.bmp', 'output3.png')\r\ncnn.diagonallinedetection('input.bmp', 'output4.png')\r\ncnn.inversion('input.bmp', 'output5.png')\r\ncnn.generaltemplates('input.bmp', 'output6.png')\r\n```\r\n#### OR\r\nUse example.py available with the repository.\r\n```sh\r\n$ python example.py\r\n```\r\n\r\n## Example results\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/input.bmp)\r\n*Input: input.bmp*\r\n\r\n**Edge Detection:**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/output1.png)\r\n*Output: output1.png*\r\n\r\n\r\n**Corner Detection:**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/output3.png)\r\n*Output: output3.png*\r\n\r\n\r\n**Diagonal line Detection:**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/output4.png)\r\n*Output: output4.png*\r\n\r\n\r\n**Inversion (Logic NOT):**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/output5.png)\r\n*Output: output5.png*\r\n\r\n## Another example (Lenna)\r\n\r\nHere, the input is the popular face in image processing field, Lenna.\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/lenna.gif)\r\n*Input: lenna.gif*\r\n\r\n\r\n**Edge Detection:**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/lenna_edge.png)\r\n*Output: lenna_edge.png*\r\n\r\n\r\n**Diagonal line Detection:**\r\n\r\n![](https://raw.githubusercontent.com/ankitaggarwal011/PyCNN/master/images/lenna_diagonal.png)\r\n*Output: lenna_diagonal.png*\r\n\r\n\r\n## API\r\n```python\r\nfrom cnnimg import cnn\r\n```\r\nImport the module in your main file.\r\n#### cnn.edgedetection(inputimagelocation, outputimagelocation)\r\nFunction for edge detection using CNN on a given image.\r\n#### cnn.grayscaleedgedetection(inputimagelocation, outputimagelocation)\r\nFunction for grayscale edge detection using CNN on a given image.\r\n#### cnn.cornerdetection(inputimagelocation, outputimagelocation)\r\nFunction for corner detection using CNN on a given image.\r\n#### cnn.diagonallinedetection(inputimagelocation, outputimagelocation)\r\nFunction for diagonal line detection using CNN on a given image.\r\n#### cnn.inversion(inputimagelocation, outputimagelocation)\r\nFunction for invert an image using CNN.\r\n#### cnn.generaltemplates(inputimagelocation, outputimagelocation)\r\nFunction for applying general CNN templates on a given image.\r\n\r\n#### inputimagelocation is the location of the input image, Type: String.\r\n#### outputimagelocation is the location of the output image, Type: String.\r\n\r\n\r\n## Contributors\r\n\r\n#### Author: Ankit Aggarwal\r\n\r\nIf anybody is interested in working on developing this library, fork and feel free to get in touch with me.\r\n\r\n## License\r\n\r\n[MIT License](https://github.com/ankitaggarwal011/CNN-Image-Processing/blob/master/LICENSE)\r\n","google":"UA-59109394-2","note":"Don't delete this file! It's used internally to help with page regeneration."}